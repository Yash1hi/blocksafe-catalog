
import { useState } from "react";
import { Check, ChevronsUpDown, Filter } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
import { VulnerabilityLevel } from "@/lib/data";

interface FilterOption {
  value: string;
  label: string;
}

interface VulnerabilityFilterProps {
  selectedSeverity: VulnerabilityLevel | "all";
  setSelectedSeverity: (severity: VulnerabilityLevel | "all") => void;
  selectedBlockchain: string | null;
  setSelectedBlockchain: (blockchain: string | null) => void;
  blockchains: string[];
}

export function VulnerabilityFilter({
  selectedSeverity,
  setSelectedSeverity,
  selectedBlockchain,
  setSelectedBlockchain,
  blockchains,
}: VulnerabilityFilterProps) {
  const [openSeverity, setOpenSeverity] = useState(false);
  const [openBlockchain, setOpenBlockchain] = useState(false);

  const severityOptions: FilterOption[] = [
    { value: "all", label: "All Severities" },
    { value: "critical", label: "Critical" },
    { value: "high", label: "High" },
    { value: "medium", label: "Medium" },
    { value: "low", label: "Low" },
    { value: "info", label: "Info" },
  ];

  const blockchainOptions: FilterOption[] = [
    { value: "all", label: "All Blockchains" },
    ...blockchains.map(blockchain => ({ value: blockchain, label: blockchain })),
  ];

  return (
    <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2 mb-4">
      <div className="flex items-center">
        <Filter className="mr-2 h-4 w-4 text-muted-foreground" />
        <span className="text-sm font-medium">Filter:</span>
      </div>
      
      <div className="flex flex-wrap gap-2">
        <Popover open={openSeverity} onOpenChange={setOpenSeverity}>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              role="combobox"
              aria-expanded={openSeverity}
              className="w-[180px] justify-between"
            >
              {selectedSeverity === "all"
                ? "All Severities"
                : severityOptions.find((option) => option.value === selectedSeverity)?.label}
              <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[180px] p-0">
            <Command>
              <CommandInput placeholder="Search severity..." />
              <CommandEmpty>No severity found.</CommandEmpty>
              <CommandGroup>
                {severityOptions.map((option) => (
                  <CommandItem
                    key={option.value}
                    value={option.value}
                    onSelect={(currentValue) => {
                      setSelectedSeverity(currentValue as VulnerabilityLevel | "all");
                      setOpenSeverity(false);
                    }}
                  >
                    <Check
                      className={cn(
                        "mr-2 h-4 w-4",
                        selectedSeverity === option.value ? "opacity-100" : "opacity-0"
                      )}
                    />
                    {option.label}
                  </CommandItem>
                ))}
              </CommandGroup>
            </Command>
          </PopoverContent>
        </Popover>

        <Popover open={openBlockchain} onOpenChange={setOpenBlockchain}>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              role="combobox"
              aria-expanded={openBlockchain}
              className="w-[180px] justify-between"
            >
              {selectedBlockchain === null
                ? "All Blockchains"
                : blockchainOptions.find((option) => option.value === selectedBlockchain)?.label}
              <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[180px] p-0">
            <Command>
              <CommandInput placeholder="Search blockchain..." />
              <CommandEmpty>No blockchain found.</CommandEmpty>
              <CommandGroup>
                {blockchainOptions.map((option) => (
                  <CommandItem
                    key={option.value}
                    value={option.value}
                    onSelect={(currentValue) => {
                      setSelectedBlockchain(currentValue === "all" ? null : currentValue);
                      setOpenBlockchain(false);
                    }}
                  >
                    <Check
                      className={cn(
                        "mr-2 h-4 w-4",
                        (selectedBlockchain === option.value || 
                         (selectedBlockchain === null && option.value === "all")) 
                          ? "opacity-100" : "opacity-0"
                      )}
                    />
                    {option.label}
                  </CommandItem>
                ))}
              </CommandGroup>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}
